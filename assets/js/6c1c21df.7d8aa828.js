"use strict";(self.webpackChunkneutron=self.webpackChunkneutron||[]).push([[4020],{3905:(t,e,n)=>{n.d(e,{Zo:()=>u,kt:()=>d});var r=n(7294);function a(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function o(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function i(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?o(Object(n),!0).forEach((function(e){a(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function s(t,e){if(null==t)return{};var n,r,a=function(t,e){if(null==t)return{};var n,r,a={},o=Object.keys(t);for(r=0;r<o.length;r++)n=o[r],e.indexOf(n)>=0||(a[n]=t[n]);return a}(t,e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(t);for(r=0;r<o.length;r++)n=o[r],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(a[n]=t[n])}return a}var l=r.createContext({}),c=function(t){var e=r.useContext(l),n=e;return t&&(n="function"==typeof t?t(e):i(i({},e),t)),n},u=function(t){var e=c(t.components);return r.createElement(l.Provider,{value:e},t.children)},p={inlineCode:"code",wrapper:function(t){var e=t.children;return r.createElement(r.Fragment,{},e)}},m=r.forwardRef((function(t,e){var n=t.components,a=t.mdxType,o=t.originalType,l=t.parentName,u=s(t,["components","mdxType","originalType","parentName"]),m=c(n),d=a,f=m["".concat(l,".").concat(d)]||m[d]||p[d]||o;return n?r.createElement(f,i(i({ref:e},u),{},{components:n})):r.createElement(f,i({ref:e},u))}));function d(t,e){var n=arguments,a=e&&e.mdxType;if("string"==typeof t||a){var o=n.length,i=new Array(o);i[0]=m;var s={};for(var l in e)hasOwnProperty.call(e,l)&&(s[l]=e[l]);s.originalType=t,s.mdxType="string"==typeof t?t:a,i[1]=s;for(var c=2;c<o;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},3777:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>l,contentTitle:()=>i,default:()=>p,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var r=n(7462),a=(n(7294),n(3905));const o={},i="Integration tests",s={unversionedId:"tutorials/integration_tests",id:"tutorials/integration_tests",title:"Integration tests",description:"There is a set of integration tests which cover main Neutron features. If you develop a smart contract for Neutron you can add some tests into this set to make sure everything works as expected.",source:"@site/docs/tutorials/integration_tests.md",sourceDirName:"tutorials",slug:"/tutorials/integration_tests",permalink:"/tutorials/integration_tests",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"CosmWasm + ICQ",permalink:"/tutorials/cosmwasm_icq"},next:{title:"CosmWasm + Remix IDE",permalink:"/tutorials/cosmwasm_remix"}},l={},c=[{value:"Installation",id:"installation",level:2},{value:"Running the tests",id:"running-the-tests",level:2},{value:"Environment variables you can redefine",id:"environment-variables-you-can-redefine",level:2},{value:"Config",id:"config",level:2},{value:"Creating your own tests",id:"creating-your-own-tests",level:2},{value:"Creating your contract",id:"creating-your-contract",level:3},{value:"Updating artifacts",id:"updating-artifacts",level:3},{value:"Your first test",id:"your-first-test",level:3}],u={toc:c};function p(t){let{components:e,...n}=t;return(0,a.kt)("wrapper",(0,r.Z)({},u,n,{components:e,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"integration-tests"},"Integration tests"),(0,a.kt)("p",null,"There is a set of integration tests which cover main Neutron features. If you develop a smart contract for Neutron you can add some tests into this set to make sure everything works as expected."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#Installation"},"Installation")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#Running-the-tests"},"Running the tests")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#Environment-variables-you-can-redefine"},"Environment variables")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#Creating-your-own-tests"},"Creating your own tests"))),(0,a.kt)("h2",{id:"installation"},"Installation"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"git clone git@github.com:neutron-org/neutron-integration-tests.git")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"git clone git@github.com:neutron-org/neutron.git")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"git clone git@github.com:neutron-org/cosmos-query-relayer.git")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"git clone -b v7.0.3 git@github.com:cosmos/gaia.git")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"cd neutron-integration-tests")),(0,a.kt)("li",{parentName:"ul"},"*"," ",(0,a.kt)("inlineCode",{parentName:"li"},"make -C setup build-all")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"yarn")),(0,a.kt)("li",{parentName:"ul"},"Make sure you have docker installed and docker daemon running")),(0,a.kt)("p",null,"*"," Only for the first run, to build hermes ibc relayer and gaiad containers"),(0,a.kt)("h2",{id:"running-the-tests"},"Running the tests"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"yarn test # all tests\nyarn test:simple # basic tests\nyarn test:interchaintx # interchain txs test\nyarn test:interchain_tx_query # interchain tx query test\nyarn test:interchain_kv_query # interchain kv query test\n")),(0,a.kt)("h2",{id:"environment-variables-you-can-redefine"},"Environment variables you can redefine"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"NEUTRON_DIR - directory where Neutron is located\nNEUTRON_DENOM - neutron network denom\nCOSMOS_DENOM - gaia (cosmoshub) network denom\nCONTRACTS_PATH - path to contracts that will be used in tests\nNEUTRON_ADDRESS_PREFIX - address prefix for neutron controller network\nCOSMOS_ADDRESS_PREFIX - address prefix for gaia (cosmoshub) host network\nNODE1_URL - url to the first node\nNODE2_URL - url to the second node\nBLOCKS_COUNT_BEFORE_START - how many blocks we wait before start first test\nNO_DOCKER - do not start cosmopark for tests\nBLOCK_TIME - time in ms for 1 block production\n")),(0,a.kt)("h2",{id:"config"},"Config"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"src/config.json\n")),(0,a.kt)("h2",{id:"creating-your-own-tests"},"Creating your own tests"),(0,a.kt)("h3",{id:"creating-your-contract"},"Creating your contract"),(0,a.kt)("p",null,"To create a new contract you can refer to ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/neutron-org/neutron-sdk"},"Neutron Cosmwasm SDK Repo")," to have an idea how to use Neutron SDK."),(0,a.kt)("h3",{id:"updating-artifacts"},"Updating artifacts"),(0,a.kt)("p",null,"You'll need to update artifacts in ",(0,a.kt)("inlineCode",{parentName:"p"},"./contracts")," folder in case you have created a new contract. Place your contract(s) into ",(0,a.kt)("inlineCode",{parentName:"p"},"./contracts/artifacts")," folder. Let's say you have the contract  with name ",(0,a.kt)("inlineCode",{parentName:"p"},"my_contract.wasm")),(0,a.kt)("h3",{id:"your-first-test"},"Your first test"),(0,a.kt)("p",null,"Create a file named ",(0,a.kt)("inlineCode",{parentName:"p"},"new_one.test.ts")," in ",(0,a.kt)("inlineCode",{parentName:"p"},"./src/testcases")," with following code "),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"import { CosmosWrapper } from '../helpers/cosmos';\nimport { TestStateLocalCosmosTestNet } from './common_localcosmosnet';\n\ndescribe('Neutron / My test', () => {\n  let testState: TestStateLocalCosmosTestNet;\n  let cm: CosmosWrapper;\n  let codeId: string;\n  let contractAddress: string;\n\n  beforeAll(async () => {\n    testState = new TestStateLocalCosmosTestNet();\n    await testState.init();\n    cm = new CosmosWrapper(testState.sdk1, testState.wallets.demo1);\n  });\n\n  test('store contract', async () => {\n    codeId = await cm.storeWasm('my_contract.wasm');\n    expect(parseInt(codeId)).toBeGreaterThan(0);\n  });\n  test('instantiate', async () => {\n    const res = await cm.instantiate(codeId, '{}', 'my_contract');\n    contractAddress = res;\n    expect(res).toStartWith('neutron');\n  });\n  test('execute contract', async () => {\n    const res = await cm.executeContract(\n      contractAddress,\n      JSON.stringify({\n        my_method: {\n          //we assume you have this method in the contract\n          foo: 'bar',\n        },\n      }),\n    );\n    expect(res.code).toEqual(0);\n  });\n});\n\n")),(0,a.kt)("p",null,"Then update ",(0,a.kt)("inlineCode",{parentName:"p"},"package.json")," in the root folder. Like this"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'...\n    "test:new_one": "jest --runInBand -b src/testcases/new_one",\n...\n')),(0,a.kt)("p",null,"Now you can run your test:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"yarn test:new_one\n")))}p.isMDXComponent=!0}}]);